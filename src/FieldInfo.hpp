#ifndef FIELDINFO_H_INCLUDED
#define FIELDINFO_H_INCLUDED

#include <cstdint>
#include <vector>

using namespace std;

class FieldInfo {

private:
/*Declared public; may be accessed from outside its package.*/
static const uint16_t ACC_PUBLIC = 0x0001;
/*Declared private; accessible only within the defining class.*/
static const uint16_t ACC_PRIVATE = 0x0002;
/*Declared protected; may be accessed within subclasses.*/
static const uint16_t ACC_PROTECTED = 0x0004;
/*Declared static.*/
static const uint16_t ACC_STATIC = 0x0008;
/*Declared final; must not be overridden (§5.4.5).*/
static const uint16_t ACC_FINAL = 0x0010;
/*Declared synchronized; invocation is wrapped by a monitor use.*/
static const uint16_t ACC_SYNCHRONIZED = 0x0020;
/*A bridge method, generated by the compiler.*/
static const uint16_t ACC_BRIDGE = 0x0040;
/*Declared with variable number of arguments.*/
static const uint16_t ACC_VARARGS = 0x0080;
/*Declared native; implemented in a language other than Java.*/
static const uint16_t ACC_NATIVE = 0x0100;
/*Declared abstract; no implementation is provided.*/
static const uint16_t ACC_ABSTRACT = 0x0400;
/*Declared strictfp; floating-point mode is FP-strict.*/
static const uint16_t ACC_STRICT = 0x0800;
/*Declared synthetic; not present in the source code.*/
static const uint16_t ACC_SYNTHETIC = 0x1000;

public:
    uint16_t access_flags;
    /*
    The value of the name_index item must be a valid index into the
    constant_pool table. The constant_pool entry at that index must be a
    CONSTANT_Utf8_info structure (§4.4.7) representing either one of the special
    method names <init> or <clinit> (§2.9), or a valid unqualified name
    denoting a method (§4.2.2).
    */
    uint16_t name_index;
    /*
    The value of the descriptor_index item must be a valid index into the
    constant_pool table. The constant_pool entry at that index must be
    a CONSTANT_Utf8_info structure representing a valid method descriptor
    (§4.3.3).
    */
    uint16_t descriptor_index;
    /*
    The value of the attributes_count item indicates the number of additional attributes of this method.
    */
    uint16_t attributes_count;
    /*
    Each value of the attributes table must be an attribute_info structure(§4.7).

    A method can have any number of optional attributes associated with it.
    
    The attributes defined by this specification as appearing in the attributes
    table of a method_info structure are listed in Table 4.7-C.
    
    The rules concerning attributes defined to appear in the attributes table of a
    method_info structure are given in §4.7.
    
    The rules concerning non-predefined attributes in the attributes table of a
    method_info structure are given in §4.7.1.
    */
    // vector<AttributeInfo *> attributes;


};

#endif